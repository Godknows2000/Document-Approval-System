@page
@model IndexModel
<div asp-validation-summary="All" class="text-danger"></div>
<form method="post" id="RegForm">
    <input type="hidden" asp-for="Employee.Id" value="@Guid.NewGuid()" />
    <input type="hidden" asp-for="Employee.Surname" data-bind="value:Surname" />
    <input type="hidden" asp-for="Employee.FirstName" data-bind="value:Name" />
    <input type="hidden" asp-for="Employee.IdNumber" data-bind="value:IDNo" />
    <input type="hidden" asp-for="Employee.DoB" data-bind="value:DOB" />
    <input type="hidden" asp-for="Employee.Address" data-bind="value:Address" />
    <input type="hidden" asp-for="Employee.TitleId" data-bind="value:Title" />
    <input type="hiden" asp-for="Employee.DepartmentId" data-bind="value:Department" />
    <input type="hidden" asp-for="Mobile" data-bind="value:Mobile" />
    <input type="hidden" asp-for="Employee.Position" data-bind="value:Position" />
    <input type="hidden" asp-for="Password" data-bind="value:Password" />
    <input type="hidden" asp-for="Email" data-bind="value:Email" />
</form>
<div class="row">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <ol class="v-progressbar" data-bind="foreach:Steps">
                    <li data-bind="text:Name, class: $root.GetStepCss(Id)"></li>
                </ol>
            </div>
        </div>
    </div>
    <div class="col-md-9">
        <div class="card">
            <div class="card-header"></div>
            <div class="card-body">
                <h4 class="mb-3" data-bind="text:CurStep().Name"></h4>
                <!--ko if: CurStep().Id==0-->
                <div class="row">
                    <div class="col-md-2">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !TitleIsValid()}">
                                <select id="Select" class="form-control form-select" data-placeholder="Title" asp-items="Model.Titles" data-bind="value:Title, css: {'is-invalid': !TitleIsValid()}">
                                    <option value="">Select</option>
                                </select>
                                <label for="Select">Title</label>
                            </div>
                            <div id="titVal" class="invalid-feedback">Title is required</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !NameIsValid()}">
                                <input type="text" data-bind="textinput:Name, css: {'is-invalid': !NameIsValid()}" class="form-control" required />
                                <label>Forename(s)</label>
                            </div>
                            <div id="nameVal" class="invalid-feedback">Name is required</div>
                        </div>

                    </div>
                    <div class="col-md-6">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !SurnameIsValid()}">
                                <input type="text" data-bind="textinput:Surname, css: {'is-invalid': !SurnameIsValid()}" class="form-control" required />
                                <label>Surname</label>
                            </div>
                            <div id="surnameVal" class="invalid-feedback">Surname is required</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !DOBIsValid()}">
                                <input type="date" data-bind="textinput:DOB, css: {'is-invalid': !DOBIsValid()}" class="form-control" required />
                                <label for="dob">Date of birth</label>
                            </div>
                            <div id="dobVal" class="invalid-feedback">Invalid date of birth</div>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !IDIsValid()}">
                                <input type="text" data-bind="textinput:IDNo, css: {'is-invalid': !IDIsValid()}" class="form-control" required />
                                <label>National ID number</label>
                            </div>
                            <div id="idVal" class="invalid-feedback">ID number is required</div>
                        </div>
                    </div>
                </div>
                <!--/ko-->
                <!--ko if: CurStep().Id==1-->
                <div class="row">
                    <div class="col-md">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !EmailIsValid()}">
                                <input type="email" data-bind="textinput:Email, css: {'is-invalid': !EmailIsValid()}" class="form-control" required />
                                <label>Email address</label>
                            </div>
                            <div id="emVal" class="invalid-feedback">Invalid email address</div>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !MobileIsValid()}">
                                <input type="number" data-bind="textinput:Mobile, css: {'is-invalid': !MobileIsValid()}" class="form-control" required />
                                <label>Mobile</label>
                            </div>
                            <div id="mobVal" class="invalid-feedback">Invalid mobile number</div>
                        </div>
                    </div>
                </div>
                <div class="mb-3 has-validation">
                    <div class="form-floating" data-bind="css: {'is-invalid': !AddrIsValid()}">
                        <input type="text" data-bind="textinput:Address, css: {'is-invalid': !AddrIsValid()}" class="form-control" required />
                        <label>Home address</label>
                    </div>
                    <div id="addrVal" class="invalid-feedback">Address is required</div>
                </div>
                <!--/ko-->
                <!--ko if: CurStep().Id==2-->
                <div class="mb-3 has-validation">
                    <div class="form-floating" data-bind="css: {'is-invalid': !DepartmentIsValid()}">
                        <select id="Select" class="form-select" data-bind="value:Department, css: {'is-invalid': !DepartmentIsValid()}" asp-items="Model.Departments">
                            <option value="">Select..</option>
                        </select>
                        <label for="Select" class="form-label">Department</label>
                    </div>
                    <div id="sectVal" class="invalid-feedback">Department is required</div>
                </div>
                <!--ko if: Department()==1 -->
                @*<div class="mb-3 has-validation">
                    <select id="Select" data-placeholder="Select employer" class="form-control form-select select2" data-bind="value:Employer" asp-items="Model.Departments">
                        <option value="">Select</option>
                    </select>
                    <div id="empVal" class="invalid-feedback">Employer is required</div>
                </div>*@
                <!--/ko-->
                <!--ko if: Department()==2 -->
                @*<div class="mb-3 has-validation">
                    <select id="Select" data-placeholder="Select employer" class="form-control form-select select2" data-bind="value:Employer" asp-items="Model.Departments">
                        <option value="">Select</option>
                    </select>
                    <div id="empVal" class="invalid-feedback">Employer is required</div>
                </div>*@
                <!--/ko-->
                <div class="mb-3 has-validation">
                    <div class="form-floating" data-bind="css: {'is-invalid': !PositionIsValid()}">
                        <input type="text" data-bind="textinput:Position, css: {'is-invalid': !PositionIsValid()}" class="form-control" required />
                        <label>Position</label>
                    </div>
                    <div id="posVal" class="invalid-feedback">Position is required</div>
                </div>
                <!--/ko-->
                <!--ko if: CurStep().Id==3-->
                <div class="mb-3 form-floating">
                    <input type="text" class="form-control" data-bind="textinput:Email" readonly />
                    <label>Username</label>
                </div>
                <div class="mb-3 has-validation">
                    <div class="form-floating" data-bind="css: {'is-invalid': !PasswordIsValid()}">
                        <input type="password" class="form-control" data-bind="textinput:Password, css: {'is-invalid': !PasswordIsValid()}" />
                        <label>Password</label>
                    </div>
                    <div id="posVal" class="invalid-feedback">Password should be at least 6 characters long.</div>
                </div>
                <div class="mb-3 has-validation">
                    <div class="form-floating" data-bind="css: {'is-invalid': !CPasswordIsValid()}">
                        <input type="password" data-bind="textinput:CPassword, css: {'is-invalid': !CPasswordIsValid()}" class="form-control" />
                        <label>Confirm password</label>
                    </div>
                    <div id="cpassVal" class="invalid-feedback">Passwords do not match</div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3 has-validation">
                            <div class="form-floating" data-bind="css: {'is-invalid': !OTPIsValid()}">
                                <input type="number" maxlength="8" class="form-control" data-bind="textinput:OTP, css: {'is-invalid': !OTPIsValid()}" />
                                <label>OTP</label>
                            </div>
                            <div id="otpVal" class="invalid-feedback">Invalid OTP</div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <button class="btn btn-outline-info">
                            <i class="fa-solid fa-share-from-square"></i> Send OTP to <span class="fw-bold" data-bind="text:Mobile"></span>
                        </button>
                        <div class="text-muted small">*Make sure you have provided a correct mobile number</div>
                    </div>
                </div>
                <!--/ko-->
            </div>
            <div class="card-footer">
                <div class="row">
                    <div class="col-md text-start">
                        <!--ko if: CurStep().Id>0 && !IsSubmitting()-->
                        <button class="btn btn-outline-primary" data-bind="click:PrevStep"><i class="fa fa-arrow-left"></i> Previous</button>
                        <!--/ko-->
                    </div>
                    <div class="col-md">
                        <!--ko if: CurStep().Id<Steps().length-1-->
                        <button class="btn btn-primary" data-bind="click:NextStep">Next <i class="fa fa-arrow-right"></i></button>
                        <!--/ko-->
                        <!--ko if: CurStep().Id==Steps().length-1-->
                        <!--ko if: !IsSubmitting()-->
                        <button class="btn btn-success" data-bind="click:Submit"><i class="fa fa-save"></i> Submit </button>
                        <!--/ko-->
                        <span class="small text-muted" data-bind="if:IsSubmitting"><i class="fa fa-spin fa-spinner"></i> Creating your account, please wait..</span>
                        <!--/ko-->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
        <script type="text/javascript">
            function isEmail(email) {
                var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
                return regex.test(email);
            }
            function Step(id, name) {
                var self = this;
                self.active = ko.observable(false);
                self.Name = name;
                self.Id = id;
                self.Css = ko.computed(function() {
                    return self.active ? "active" : "";
                });
                self.IsValidated = ko.observable(false);
            }
            function VM() {
                var self = this;
                //Step 0
                self.Title = ko.observable("");
                self.Name = ko.observable("");
                self.Surname = ko.observable("");
                self.IDNo = ko.observable("");
                self.DOB = ko.observable("");
                //Step 1
                self.Email = ko.observable("");
                self.Mobile = ko.observable("");
                self.Address = ko.observable("");
                //Step 2
                self.Department = ko.observable("");
                
                self.Position = ko.observable("");
                //Step 3
                self.Password = ko.observable("");
                self.CPassword = ko.observable("");
                self.OTP = ko.observable("");
                self.IsSubmitting = ko.observable(false);

                self.Department.subscribe(function(){
                    applySelect2();
                })
                self.Steps = ko.observableArray([
                    new Step(0, "Basic information"),
                    new Step(1, "Contact details"),
                    new Step(2, "Employment details"),
                    new Step(3, "Login account")
                ]);
                self.CurStep = ko.observable();
                self.CurStep(self.Steps()[0]);

                self.GetStepCss = function(id) {
                    return id <= self.CurStep().Id ? "active" : "";
                }
                self.NextStep = function() {
                    self.CurStep().IsValidated(true);
                    if (!self.ValidateStep()) return;
                    self.CurStep(self.Steps()[self.CurStep().Id + 1]);
                    applySelect2();
                }
                self.PrevStep = function() {
                    self.CurStep(self.Steps()[self.CurStep().Id - 1]);
                    applySelect2();
                }

                //Step 0
                self.TitleIsValid = ko.computed(function() {
                    return !self.Steps()[0].IsValidated() || self.Title();
                });
                self.NameIsValid = ko.computed(function() {
                    return !self.Steps()[0].IsValidated() || self.Name().trim().length > 1;
                });
                self.SurnameIsValid = ko.computed(function() {
                    return !self.Steps()[0].IsValidated() || self.Surname().trim().length > 1;
                });
                self.IDIsValid = ko.computed(function() {
                    return !self.Steps()[0].IsValidated() || self.IDNo().trim().length > 6;
                });
                self.DOBIsValid = ko.computed(function() {
                    var date = Date.parse(self.DOB());
                    var age = 0;
                    if (!isNaN(date)) age = Math.abs((new Date(Date.now() - date)).getUTCFullYear() - 1970);
                    return !self.Steps()[0].IsValidated() || (!isNaN(date) && age > 17 && age < 65);
                });

                //Step 1
                self.EmailIsValid = ko.computed(function() {
                    return !self.Steps()[1].IsValidated() || isEmail(self.Email());
                });
                self.MobileIsValid = ko.computed(function() {
                    return !self.Steps()[1].IsValidated() || self.Mobile().trim().length > 9;
                });
                self.AddrIsValid = ko.computed(function() {
                    return !self.Steps()[1].IsValidated() || self.Address().trim().length > 2;
                });
                //Step 2
                self.DepartmentIsValid = ko.computed(function() {
                    return !self.Steps()[2].IsValidated() || self.Department();
                });
                self.PositionIsValid = ko.computed(function() {
                    return !self.Steps()[2].IsValidated() || self.Position().trim().length > 4;
                });
                //Step 3
                self.PasswordIsValid = ko.computed(function() {
                    return !self.Steps()[3].IsValidated() || self.Password().length > 5;
                });
                self.CPasswordIsValid = ko.computed(function() {
                    return !self.Steps()[3].IsValidated() || self.CPassword() == self.Password();
                });
                self.OTPIsValid = ko.computed(function() {
                    return !self.Steps()[3].IsValidated() || self.OTP().length == 4;
                });

                self.Submit = function() {
                    self.CurStep().IsValidated(true);
                    if(self.CPasswordIsValid() && self.OTPIsValid()) {
                        self.IsSubmitting(true);
                        $("#RegForm").submit();
                    }
                }

                self.ValidateStep = function() {
                    if (self.CurStep().Id == 0) {
                        return self.NameIsValid() && self.SurnameIsValid() && self.DOBIsValid() && self.IDIsValid();
                    }
                    if (self.CurStep().Id == 1) {
                        return self.EmailIsValid() && self.MobileIsValid() && self.AddrIsValid();
                    }
                    if (self.CurStep().Id == 2) {
                        return self.DepartmentIsValid() && self.PositionIsValid();
                    }
                    return false;
                }
            }
            $(document).ready(function() {
                ko.applyBindings(new VM());
            });

        </script>
    }
